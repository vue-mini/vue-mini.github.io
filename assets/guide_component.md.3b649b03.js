import{o as n,c as s,a}from"./app.8efcc44e.js";const t='{"title":"定义组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"setup","slug":"setup"},{"level":2,"title":"生命周期","slug":"生命周期"},{"level":2,"title":"与原生语法混用","slug":"与原生语法混用"},{"level":2,"title":"简洁语法","slug":"简洁语法"}],"relativePath":"guide/component.md","lastUpdated":1622194741198}',p={},o=a('<h1 id="定义组件"><a class="header-anchor" href="#定义组件" aria-hidden="true">#</a> 定义组件</h1><p>小程序中的每个组件都需要在对应的 js 文件中使用 <code>defineComponent</code> 函数进行定义。它是 <code>Component</code> 函数的超集，它额外接收一个 <code>setup</code> 函数。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      double<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">,</span>\n      increment<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>如果 <code>setup</code> 返回一个对象，则对象的属性将会被合并到组件实例上，可以直接在组件模版中使用。</p><div class="language-xml"><pre><code><span class="token comment">&lt;!-- component.wxml --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  Count is: {{ state.count }}, double is: {{ state.double }}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>注意 <code>setup</code> 返回的 ref 在模板中会自动解开，不需要写 <code>.value</code>。</p><h2 id="setup"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> setup</h2><ul><li><strong>调用时机</strong></li></ul><p><code>setup</code> 会在 <code>attached</code> 阶段被调用。返回都数据和方法也会在此时才会被合并到组件实例上，所以模版初次渲染时数据可能是 <code>undefined</code>。不过小程序模版对此做了兼容，所以不用担心会报错。</p><ul><li><strong>调用顺序</strong></li></ul><p>组件 <code>setup</code> 函数会跟 <code>attached</code> 钩子一样按组件树从上到下依次执行，但是可能会早于页面的 <code>setup</code> 函数执行（取决于定义页面的方式），所以在 <code>setup</code> 函数执行时，<code>props</code> 可能还未初始化。在这种情况下，如果你需要依据 <code>props</code> 派生状态，可以使用 <code>computed</code>，如果你需要依据 <code>props</code> 执行副作用，可以使用 <code>watchEffect</code> 或 <code>watch</code>。</p><ul><li><strong>参数</strong></li></ul><p><code>setup</code> 函数接收组件 <code>props</code> 作为其第一个参数，<code>props</code> 的声明与小程序原生语法没有差别。<code>setup</code> 函数无需返回 <code>props</code>，它的属性默认就能在模版中使用。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  properties<span class="token operator">:</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>注意 <code>props</code> 对象是响应式的，可以用 <code>watchEffect</code> 或 <code>watch</code> 观察和响应 <code>props</code> 的更新，也可以基于 <code>props</code> 生成新的计算状态。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> watchEffect<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  properties<span class="token operator">:</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count is: &#39;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      double<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>然而<strong>不要</strong>解构 <code>props</code> 对象，那样会使其失去响应性。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  properties<span class="token operator">:</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> Number<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> count <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;count is: &#39;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span> <span class="token comment">// Will not be reactive!</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>在开发过程中，<code>props</code> 对象对用户空间代码是不可变的（用户代码尝试修改 <code>props</code> 时会触发警告）。</p><p>第二个参数提供了一个上下文对象，从小程序组件 <code>this</code> 中选择性的暴露了一些 property。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span>is\n    context<span class="token punctuation">.</span>id\n    context<span class="token punctuation">.</span>dataset\n    context<span class="token punctuation">.</span>triggerEvent\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><strong><code>this</code> 的用法</strong></li></ul><p><strong><code>this</code> 在 <code>setup()</code> 中不可用</strong>。这是为了避免混乱。</p><h2 id="生命周期"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>可以直接导入 <code>onXXX</code> 一族的函数来注册生命周期钩子。它们接收的参数与对应的生命周期一致，每个 <code>onXXX</code> 函数都能被多次调用。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> onReady<span class="token punctuation">,</span> onMove<span class="token punctuation">,</span> onDetach <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">onMove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;move&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;detach&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>这些生命周期钩子注册函数只能在 <code>setup()</code> 期间同步使用，其他场景下调用这些函数会抛出一个错误。</p><p>在 <code>setup()</code> 内同步创建的侦听器和计算状态会在页面销毁时自动删除。</p><ul><li><strong>created</strong></li></ul><p>Vue Mini 并没有 <code>onCreate</code> 钩子函数，这是因为 <code>setup</code> 是在 <code>attached</code> 阶段执行的，此时 <code>created</code> 生命周期已经执行完毕了。不过在绝大部分情况下，你应该都不需要使用 <code>created</code> 生命周期。如果你真的需要，可以使用小程序原生语法。</p><ul><li><p><strong>生命周期对应关系</strong></p><ul><li><code>lifetimes.created</code> -&gt; 无</li><li><code>lifetimes.attached</code> -&gt; <code>setup</code></li><li><code>lifetimes.ready</code> -&gt; <code>onReady</code></li><li><code>lifetimes.moved</code> -&gt; <code>onMove</code></li><li><code>lifetimes.detached</code> -&gt; <code>onDetach</code></li><li><code>lifetimes.error</code> -&gt; <code>onError</code></li><li><code>pageLifetimes.show</code> -&gt; <code>onShow</code></li><li><code>pageLifetimes.hide</code> -&gt; <code>onHide</code></li><li><code>pageLifetimes.resize</code> -&gt; <code>onResize</code></li></ul></li></ul><h2 id="与原生语法混用"><a class="header-anchor" href="#与原生语法混用" aria-hidden="true">#</a> 与原生语法混用</h2><p>由于 <code>defineComponent()</code> 是 <code>Component()</code> 的超集，所以你也能使用原生语法。</p><div class="language-js"><pre><code><span class="token comment">// component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      count<span class="token punctuation">.</span>value<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      count<span class="token punctuation">,</span>\n      increment<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    number<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> number<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>如果名称相同，<code>setup()</code> 返回的数据或方法会覆盖原生语法声明的数据或方法。你应该避免出现这种情况。</p><p>请不要在其他选项中访问 <code>setup()</code> 返回的数据或方法，这将引起混乱。如果确实有此需求，应该将相关逻辑搬到 <code>setup()</code> 内。</p><h2 id="简洁语法"><a class="header-anchor" href="#简洁语法" aria-hidden="true">#</a> 简洁语法</h2><p>如果组件没有 <code>props</code>，且不需要使用原生语法，也可以直接传递一个 <code>setup</code> 函数给 <code>defineComponent()</code>。</p><div class="language-js"><pre><code><span class="token comment">// page.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    count<span class="token punctuation">.</span>value<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    count<span class="token punctuation">,</span>\n    increment<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',39);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
