import{o as n,c as s,a}from"./app.8efcc44e.js";const t='{"title":"依赖注入","description":"","frontmatter":{},"headers":[{"level":2,"title":"Provide","slug":"provide"},{"level":2,"title":"Inject","slug":"inject"}],"relativePath":"guide/provide-inject.md","lastUpdated":1622194741204}',p={},e=a('<h1 id="依赖注入"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h1><p>与 Vue 一样，Vue Mini 提供了依赖注入功能，以解决 <code>props</code> 深度透传的问题。它们是一对 <code>provide / inject</code> 函数，它们的使用方式和 API 均与 Vue 一致。</p><h2 id="provide"><a class="header-anchor" href="#provide" aria-hidden="true">#</a> Provide</h2><div class="language-js"><pre><code><span class="token comment">// parent-component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> provide<span class="token punctuation">,</span> readonly <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      count<span class="token punctuation">.</span>value<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token function">readonly</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span> increment<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="inject"><a class="header-anchor" href="#inject" aria-hidden="true">#</a> Inject</h2><div class="language-js"><pre><code><span class="token comment">// deep-child-component.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vue-mini/wechat&#39;</span>\n\n<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      count<span class="token punctuation">,</span>\n      increment<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>依赖注入对执行顺序有所要求，<code>provide</code> 必须先于 <code>inject</code> 执行，所以在 <code>definePage</code> 的 <code>setup</code> 函数中调用 <code>provide</code> 可能会遇到问题。</p></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>Vue 的依赖注入是与组件树绑定的，但是由于小程序的限制我们不能访问组件树，所以 Vue Mini 的依赖注入与组件树并没有什么关系，每一项依赖都会被保存到一个全局单一的仓库中。也就是说依赖的 <code>key</code> 需要是全局唯一的，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener noreferrer">Symbol</a> 作 <code>key</code> 可以保证这一点。</p></div>',8);p.render=function(a,t,p,o,c,u){return n(),s("div",null,[e])};export default p;export{t as __pageData};
